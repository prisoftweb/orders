import Head from 'next/head'
import Script from 'next/script'
import Image from 'next/image'
import { getAllOrders, removeOrderOfClient } from "./api/prospects";
import { getCookie } from "cookies-next";
import Link from 'next/link';
// import useSearch from 'react-cool-search';
import { useEffect } from 'react';
import { useRouter } from 'next/router';
// import { OrderProps } from './OrderProps';

const Home = ({ orders, token }) => {
    const img = "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.2&w=160&h=160&q=80";
    // const { data, query, handleChange } = useSearch(orders.data.data, { fields: ['OrderProps.client.client'] });    
    const router = useRouter();    
    const currencyFormat = (val) => {
        return '$' + val.toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,');
    }
    const deleteOrderInstallation = async (id, client)  => {      
        confirmAlert({
          title: 'Confirmacion para eliminar orden de instalacion?',
          message: `Desea eliminar la orden del cliente ${client}`,
          buttons: [
            {
              label: 'Si',
              onClick: async () => {              
                let res = await removeOrderOfClient(id, token);
                if(res === 'success') {
                    console.log('Orden eliminada exitosamente!');
                    // showToastMessage('Orden eliminada exitosamente!');                    
                } else {        
                  showToastMessageError(res);
                }
              }
            },
            {
              label: 'No',
              onClick: () => {
                showToastMessageInfo('Se ha cancelado la eliminacion!');               
              }
            }
          ],
          closeOnEscape: true,
          closeOnClickOutside: true,
          keyCodeForClose: [8, 32],
          willUnmount: () => {},
          afterClose: () => {},
          onClickOutside: () => {
            showToastMessageWarning('Se ha cerrado dialogo, volver a intentar!');
          },
          onKeypress: () => {
            showToastMessageInfo('Favor de seleccionar SI o NO');
          },
          onKeypressEscape: () => {
            showToastMessageWarning('Se ha cerrado dialogo, volver a intentar!');
          },
          overlayClassName: "overlay-custom-class-name"
        });      
    }
    return (        
        <div>
        <Script src="https://cdn.tailwindcss.com"></Script>
        <Script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.6.4/flowbite.min.js"></Script>            
            
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
            <div className="relative overflow-x-auto shadow-md sm:rounded-lg w-screen">
                
                <table className=" text-sm text-left text-gray-500 dark:text-gray-400 w-screen">
                    <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" className="p-4">
                                <div className="flex items-center">
                                    <input id="checkbox-all-search" type="checkbox" className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"></input>
                                    <label htmlFor="checkbox-all-search" className="sr-only">checkbox</label>
                                </div>
                            </th>
                            <th scope="col" className="px-6 py-3">
                                Estatus/Cliente
                            </th>
                            <th scope="col" className="px-6 py-3">
                                ID Orden
                            </th>
                            <th scope="col" className="px-6 py-3">
                                Renta plan de internet
                            </th>
                            <th scope="col" className="px-6 py-3">
                                Costo de instalacion
                            </th>
                            <th scope="col" className="px-6 py-3">
                                Ubicacion
                            </th>
                            <th scope="col" className="px-6 py-3">
                                Origen
                            </th>
                            <th scope="col" className="px-6 py-3">
                                Accion
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        {orders.data.data.map((order) => (     
                            <tr key={order.id} className="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                                <td className="w-4 p-4">
                                    <div className="flex items-center">
                                        <input id="checkbox-table-search-1" type="checkbox" className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"></input>
                                        <label htmlFor="checkbox-table-search-1" className="sr-only">checkbox</label>
                                    </div>
                                </td>
                                <th scope="row" className="flex items-center px-3 py-4 text-gray-900 whitespace-nowrap dark:text-white">
                                    <Link href={`/orders/${order._id}`}>
                                        <Image                          
                                            src={order.user.photo}
                                            alt={order.user.name.split(' ')[0]}
                                            width={48}
                                            height={48}                                                                            
                                        />                    
                                    </Link>
                                    <div className="w-full pl-3">
                                        <Link href={`/orders/${order._id}`}>
                                            <div className="text-base font-normal">{order.ordeninstatus}</div>
                                        </Link>
                                        <div className="font-thin text-gray-500">{order.client.name} {order.client.lastname}</div>
                                    </div>  
                                </th>
                                <td className="px-6 py-4">
                                    <Link href={`/orders/${order._id}`}>
                                        <div className="text-base font-normal">{order.datets}</div>
                                    </Link>
                                    <div className="font-medium text-green-500">{order.idorden}</div>
                                </td>
                                <td className="px-6 py-4">                            
                                    <Link href={`/orders/${order._id}`}>
                                        <div className="text-base font-normal">{order.client.internetplan.paquete}</div>
                                    </Link>
                                    <div className="font-medium text-green-500">{currencyFormat(order.client.internetplan.costo)}</div>       
                                </td>
                                <td className="px-6 py-4">                            
                                    <Link href={`/orders/${order._id}`}>
                                        <div className="text-base font-normal">{order.client.installationplan.paquete}</div>
                                    </Link>
                                    <div className="font-light text-gray-800">{currencyFormat(order.client.installationplan.costo)}</div>                            
                                </td>                                
                                <td className="px-5 py-5 ">{order.client.location.community} {order.client.location.municipy}, {order.client.location.state}</td>                  
                                <td className="px-6 py-4">
                                    <Link href={`/orders/${order._id}`}>
                                        <Image                          
                                            src={`/${order.client.source}.svg`}
                                            alt={order.client.source}
                                            width={24}
                                            height={24}                                    
                                            priority="true"                                    
                                        />                    
                                    </Link>
                                </td>
                                <td className="px-6 py-4">
                                    
                                </td>
                            </tr>                       
                        ))}
                    </tbody>
                </table>
              
            </div>               
    </div>
    )
};

export async function getServerSideProps({req, res}) {      
    let orders;
    let token="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ODJiMjBhMzVkZDg4MDAxNGQ3YWEzNyIsImlhdCI6MTY5Nzc0NjY2NywiZXhwIjoxNjk3ODMzMDY3fQ.qMpTtGg6HwFHWa_UTmgr9PwTXHllCDhaIAlCtFyho0g";
    // token = getCookie('token', {req, res});    
    try {
        if(token != '') {
            orders = await getAllOrders(token);
        } else {
            console.log('Favor de iniciar sesion!');
        }    
    } catch (e) {    /*** Si algo salio mal con la solicitud, 404 page */
        return {
            notFound: true,
        };
    }
    if (!orders) {
        return {
            notFound: true,
        };
    }
    return {
        props: {
            orders, token
        },
    };
}
export default Home;

